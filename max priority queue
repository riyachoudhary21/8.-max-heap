ALGORITHM:-
PARENT(A,i) 
1.	if i==1 return NULL 
2.	return i/2 
LEFT(A,i)  
1.	if ( ( 2 i  + 1 ) ≤ heap-size[A] ) 
2.	return 2i+1 
3.	else return NULL  
RIGHT(A,i) 
1.	if ( 2   i + 2 ≤ heap-size[A] ) 
2.	return 2  i + 2  
3.	else return NULL 
MAX HEAPIFY 
MaxHeapify(A,i)     //A is an array and i is the index of given element 
1.	l=LEFT(i)         //l is the index of left child of i 
2.	r=RIGHT(i)       //r is the index of the right child of i 
3.	if l<=A.heap-size and A[l]>A[i] 
4.	set largest=l 
5.	else largest=i 
6.	if r<=A.heap-size and A[r]>a[largest] 
7.	set largest=r 
8.	if largest!=i  
9.	exchange A[i] with A[largest] 
10.	MaxHeapify(A,largest)  

BUILD MAX HEAP 
BuildMaxHeap(A[])  //A is an array 
1.	heap-size[A]←length[A] 
2.	for i←length[A]/2 down to 1 
3.	MaxHeapify(A,i) 
HEAP EXTRACT MAXIMUM 
HeapExtractMaximum(A[])  // A is the input array  
1.	if ( heap-size < 1 ) 
2.	Then return  
3.	max ← A[1]  
4.	A[1] ← A[heap-size[A]]  
5.	heap-size[A] ←heap-size[A] − 1  
6.	MaxHeapify(A, 1)  
7.	return max 
8.	Exit 
HEAP INCREASE KEY 
HeapIncreaseKey (A[],i,key)   // A is the input array, i is desired array index 
1.	if key < A[i]            //key is the new key greater than A[i]   
2.	error(“New key must be larger than current key”)  
3.	A[i] ← key  
4.	while i > 1 and A[Parent(i)] < A[i]  
5.	exchange A[i] and A[Parent(i)]  
6.	i ← Parent(i) 
HEAP INSERT KEY 
Insert(A[],key)    //A is the input array, key is the new key greater than A[i] 
1.	heap-size[A] ←heap-size[A] + 1  
2.	A[heap-size[A]] ← −∞  
3.	HeapIncreaseKey(A[heap-size[A]], key) 
CODE:
#include<stdio.h> 
#include<stdlib.h> 
void swap(int *a, int *b) 
{ 
    int tmp = *a;      
    *a = *b; 
      *b = tmp; 
} 
void maxHeapify(int arr[],int i,int N)
{     
    int l = 2*i+1; 
    int r = 2*i+2;    
   int largest = i; 
    if (l<N && arr[l]>arr[largest])
    {         
        largest = l; 
    }     else{ 
        largest = i; 
    } 
    if(r<N && arr[r]>arr[largest]){        
        largest = r; 
    }     
    if(largest!=i){ 
        swap(&arr[i],&arr[largest]);        
        maxHeapify(arr,largest,N); 
    } 
}  
void buildMaxHeap(int arr[],int N){ 
    int i; 
    for(i=(N/2)-1;i>=0;i--)
    {  
        maxHeapify(arr,i,N);    
        } 
} 
void printHeap(int arr[], int N) 
{ 
    printf("Array representation of Heap is:\n"); 
    int i;     
    for (i = 0; i < N; ++i)
    printf("%d ",arr[i]); 
    printf("\n"); 
} 
void heapIncreaseKey(int arr[],int N,int key)
{    
    if (key<arr[N]){ 
        printf("new key is smaller than current key"); 
        return; 
        }    
        arr[N]=key;  
        while(N>0 && arr[N/2]<arr[N])
        {        
            swap(&arr[N],&arr[N/2]); 
        N=N/2; 
    } 
} 
void insert(int arr[],int N,int key){    
    N+=1;     
arr[N]=-2147483648; 
    heapIncreaseKey(arr,N,key); 
}  
int heapExtractMaximum(int arr[],int N)
{   
    if (N<1){ 
        printf("error heap underflow");         
        return -1;    
        }  
        int max = arr[0];     
        arr[0]=arr[N];     
        buildMaxHeap(arr,N);     N=N-1;     
        return max; 
} 
 
int heapMaximum(int arr[],int N)
{    
    buildMaxHeap(arr,N);
return arr[0]; 
} 
void main(){ 
    int arr[20] = {1,3,5,4,6,13,10,9,8,15,17};     
    int N = 11; 
    int len = sizeof(arr)/sizeof(arr[0]);    
    buildMaxHeap(arr,len);     
    printHeap(arr,N); 
         while(1){ 
        printf("\nwhat would you like to do to the max priority queue:\n");        
        int choice=0;  
        int key=0,a=0,pos=-1;        
        printf("\t1.Insert an element.\n");        
        printf("\t2.Extract the max element.\n");       
        printf("\t3.Get the max element.\n");
        printf("\t4.Increase key value of an element.\n");        
        printf("\t5.Exit.\n");        
        scanf("%d",&choice);        
        switch(choice){               
            case 1:                  
                printf("enter the new key:\n");                 
                scanf("%d",&key);
                insert(arr,N,key);
                printHeap(arr,N);
                break;            
                case 2:a= heapExtractMaximum(arr,N);                
                printf("the extracted max element is :%d\n",a);                 
                printHeap(arr,N);
                break;
                case 3:a=heapMaximum(arr,N); 
                printf("the max element is :%d\n",a); 
                break;             
                case 4: 
                printf("enter the position of node whose value needs to be changed:\n"); 
                scanf("%d",&pos);
                printf("enter the new key:\n");
                scanf("%d",&key); 
                heapIncreaseKey(arr,N,key); 
                printHeap(arr,N);  
                break; 
                case 5: 
                exit(0);            
                default:printf("invalid choice\n"); 
        } 
    } 
}
